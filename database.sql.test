DROP DATABASE IF EXISTS harrow;
CREATE DATABASE harrow;
USE harrow;
-- ----------------------------------------------------------
-- 						CREATE TABLES                     
-- ----------------------------------------------------------
CREATE TABLE users(
	user_id BIGINT AUTO_INCREMENT,
	email VARCHAR(255),
	username VARCHAR(255),
	password VARCHAR(255),
	firstname VARCHAR(255),
	lastname VARCHAR(255),
	token VARCHAR(255),
	reg_date DATETIME DEFAULT CURRENT_TIMESTAMP(),
	is_admin TINYINT DEFAULT 0,
	PRIMARY KEY(user_id, email)
);

CREATE TABLE files(
	user_id BIGINT,
	file_id BIGINT AUTO_INCREMENT,
	name VARCHAR(255),
	size BIGINT,
	upload_isp VARCHAR(255),
	upload_location VARCHAR(255),
	full_file LONGTEXT,
	upload_date DATETIME DEFAULT CURRENT_TIMESTAMP(),
	PRIMARY KEY (file_id),
	-- FOREIGN KEY (user_id) REFERENCES users(user_id)
	ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE entries(
	file_id BIGINT,
	entry_id BIGINT AUTO_INCREMENT,
	serverIpAddress VARCHAR(20),
	startedDateTime DATETIME DEFAULT NULL,
	wait INT,
	PRIMARY KEY (entry_id),
	-- CONSTRAINT entry_file FOREIGN KEY (entry_id) REFERENCES files(file_id)
	ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE requests(
	entry_id BIGINT,
	request_id BIGINT AUTO_INCREMENT,
	url VARCHAR(255),
	method VARCHAR(5),
	PRIMARY KEY (request_id),
	-- FOREIGN KEY (entry_id) REFERENCES entries(entry_id)
	ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE responses(
	entry_id BIGINT,
	response_id BIGINT AUTO_INCREMENT,
	statusText TEXT,
	status INT(3),
	PRIMARY KEY (response_id),
	-- FOREIGN KEY (entry_id) REFERENCES entries(entry_id)
	ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE headers(
	header_id BIGINT AUTO_INCREMENT,
	request_id BIGINT DEFAULT NULL,
	response_id BIGINT DEFAULT NULL,
	host VARCHAR(255) DEFAULT NULL,
	content_type VARCHAR(255) DEFAULT NULL,
	cache_control VARCHAR(255) DEFAULT NULL,
	pragma VARCHAR(255) DEFAULT NULL,
	expires BIGINT DEFAULT NULL,
	age BIGINT DEFAULT NULL,
	last_modified VARCHAR(255) DEFAULT NULL,
	PRIMARY KEY (header_id),
	-- FOREIGN KEY (request_id) REFERENCES requests(request_id)
	-- ON DELETE CASCADE ON UPDATE CASCADE,
	-- FOREIGN KEY (response_id) REFERENCES responses(response_id)
	-- ON DELETE CASCADE ON UPDATE CASCADE
);




-- ----------------------------------------------------------
--  					CREATE PROCEDURES                    
-- ----------------------------------------------------------
DROP PROCEDURE IF EXISTS add_user;
DELIMITER $ 
CREATE PROCEDURE `add_user` (
	IN `inp_email` VARCHAR(255),
	IN `inp_username` VARCHAR(255),
	IN `inp_password` VARCHAR(255),
	IN `inp_name` VARCHAR(255),
	IN `inp_lastname` VARCHAR(255)
) 
BEGIN
	INSERT INTO users (email, username, password, firstname, lastname)
	VALUES (inp_email,inp_username,inp_password,inp_name,inp_lastname);
END $ 
DELIMITER;

DROP PROCEDURE IF EXISTS get_user;
DELIMITER $ 
CREATE PROCEDURE `get_user` (IN `inp_email` VARCHAR(255)) 
BEGIN
	SELECT *
	FROM `users`
	WHERE `email` = inp_email;
END $
DELIMITER;


DROP PROCEDURE IF EXISTS validate_login;
DELIMITER $ 
CREATE PROCEDURE `validate_login` (
	IN `inp_email` VARCHAR(255),
	IN `inp_password` VARCHAR(255)
) 
BEGIN
	SELECT * FROM `users` WHERE `email` = inp_email AND `password` = inp_password;
END $ 
DELIMITER ;

DROP PROCEDURE IF EXISTS add_file;
DELIMITER $
CREATE PROCEDURE `add_file`(
	IN `inp_user_id` BIGINT,
	IN `inp_name` VARCHAR(255),
	IN `inp_size` VARCHAR(20),
	IN `inp_upload_isp` VARCHAR(255),
	IN `inp_upload_location` VARCHAR(255)
)
BEGIN 
	INSERT INTO files(user_id,name,size,upload_isp,upload_location) VALUES (inp_user_id,inp_name,inp_size,inp_upload_isp,inp_upload_location);

	SELECT MAX(file_id) AS file_id FROM files WHERE name = `inp_name`;
END$
DELIMITER ;

DROP PROCEDURE IF EXISTS add_entry;
DELIMITER $
CREATE PROCEDURE `add_entry`(
	IN `inp_file_id` BIGINT,
	IN `inp_startedDateTime` VARCHAR(255),
	IN `inp_serverIpAddress` VARCHAR(20),
	IN `inp_wait` INT(11)
)

BEGIN 
	INSERT INTO entries(file_id,startedDateTime,serverIpAddress,wait) VALUES (inp_file_id,inp_startedDateTime,inp_serverIpAddress,inp_wait);

	SELECT MAX(entry_id) AS entry_id FROM entries WHERE file_id = `inp_file_id` ;
END$
DELIMITER ;

DROP PROCEDURE IF EXISTS add_request;
DELIMITER $
CREATE PROCEDURE `add_request`(
	IN `inp_entry_id` BIGINT,
	IN `inp_method` VARCHAR(5),
	IN `inp_url` VARCHAR(255)
)
BEGIN
	INSERT INTO requests(entry_id,url,method) VALUES (inp_entry_id,inp_url,inp_method);

	SELECT MAX(request_id) AS request_id FROM requests WHERE entry_id = `inp_entry_id` ;
END$
DELIMITER ;

DROP PROCEDURE IF EXISTS add_response;
DELIMITER $
CREATE PROCEDURE `add_response`(
	IN inp_entry_id BIGINT,
	IN inp_url VARCHAR(255),
	IN inp_method VARCHAR(5)
)
BEGIN 
	INSERT INTO responses(entry_id,url,method) VALUES
	(inp_entry_id,inp_url,inp_method);
END$
DELIMITER ;



-- DROP PROCEDURE IF EXISTS add_header;
-- DELIMITER $
-- CREATE PROCEDURE `add_header`(
-- 	IN req_res VARCHAR(255),
-- 	IN inp_id BIGINT,
-- 	IN inp_content_type VARCHAR(255),
-- 	IN inp_pragma VARCHAR(255),
-- 	IN inp_expires BIGINT, 
-- 	IN inp_age BIGINT,
-- 	IN inp_last_modified VARCHAR(255),
-- 	IN inp_host VARCHAR(255)
-- )
-- BEGIN

-- 	SELECT 1;
-- 	SET @q = CONCAT(
-- 		'INSERT INTO headers(',req_res,',content_type,pragma,expires,age,last_modified,host)
-- 	VALUES
-- 	(',QUOTE(id),',',QUOTE(inp_content_type),',',QUOTE(inp_pragma),',',QUOTE(inp_expires),',',QUOTE(inp_age),',',QUOTE(inp_last_modified),',',QUOTE(inp_host),')'
-- 	);
	
-- 	PREPARE stmt FROM @q;
-- 	EXECUTE stmt;
-- 	DEALLOCATE PREPARE stmt;
-- END$
-- DELIMITER ;